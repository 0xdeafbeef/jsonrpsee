use crate::common::{self, from_value, to_value, JsonValue};
use crate::server::{raw::RawServer, ServerRequestParams};
use fnv::FnvHashMap;
use futures::prelude::*;
use std::{collections::HashMap, fmt, io, marker::PhantomData, pin::Pin};

/// Wraps around a "raw server".
///
/// See the module-level documentation for more information.
pub struct Server<R> {
    /// Internal "raw" server.
    raw: R,
}

impl<R> Server<R> {
    /// Starts a `Server` using the given raw server internally.
    pub fn new(inner: R) -> Server<R> {
        Server { raw: inner }
    }
}

impl<R> Server<R>
where
    R: RawServer,
{
    /// Returns a `Future` resolving to the next request that this server generates.
    pub async fn next_request<'a>(&'a mut self) -> Result<ServerRq<'a, R, R::RequestId>, ()> {
        // This piece of code is where we analyze requests.
        loop {
            let (request_id, request_body) = self.raw.next_request().await?;
            let request_body = match request_body {
                common::Request::Single(rq) => rq,
                common::Request::Batch(requests) => unimplemented!(),
            };

            return Ok(ServerRq {
                me: self,
                request_id,
                request_body,
            });
        }

        panic!() // TODO:
    }

    /*/// Returns a request previously returned by `next_request` by its id.
    ///
    /// Note that previous notifications don't have an ID and can't be accessed with this method.
    ///
    /// Returns `None` if the request ID is invalid or if the request has already been answered in
    /// the past.
    pub fn request_by_id<'a>(&'a mut self, id: &common::Id) -> Option<ServerRq<<&'a mut R as RawServerRef<'a>>::Request>> {
        unimplemented!()
    }*/

    /*pub fn subscriptions_by_id(&mut self, id: &String) -> Option<ServerSubscription<R>> {
        unimplemented!()
    }*/
}

impl<R> From<R> for Server<R> {
    fn from(inner: R) -> Server<R> {
        Server::new(inner)
    }
}

/// Request generated by a `Server`.
///
/// > **Note**: Holds a borrow of the `Server`. Therefore, must be dropped before the `Server` can
/// >           be dropped.
pub struct ServerRq<'a, R, I> {
    me: &'a mut Server<R>,
    request_id: I,
    // TODO: no
    request_body: common::Call,
}

impl<'a, R, I> ServerRq<'a, R, I>
where
    R: RawServer<RequestId = I>,
    I: Clone + PartialEq + Eq + Send + Sync,
{
    fn call(&self) -> &common::Call {
        &self.request_body
    }

    /*/// Returns the id of the request.
    ///
    /// If this request object is dropped, you can retreive it again later by calling
    /// `request_by_id`. This isn't possible for notifications.
    pub fn id(&self) -> Option<&common::Id> {
        match self.call() {
            common::Call::MethodCall(common::MethodCall { id, .. }) => Some(id),
            common::Call::Notification(common::Notification { .. }) => None,
            common::Call::Invalid { id } => Some(id),        // TODO: shouldn't we panic here or something?
        }
    }*/

    /// Returns the method of this request.
    pub fn method(&self) -> &str {
        match self.call() {
            common::Call::MethodCall(common::MethodCall { method, .. }) => method,
            common::Call::Notification(common::Notification { method, .. }) => method,
            common::Call::Invalid { .. } => unimplemented!(), // TODO:
        }
    }

    /// Returns the parameters of the request, as a `common::Params`.
    pub fn params(&self) -> ServerRequestParams {
        let p = match self.call() {
            common::Call::MethodCall(common::MethodCall { params, .. }) => params,
            common::Call::Notification(common::Notification { params, .. }) => params,
            common::Call::Invalid { .. } => unimplemented!(), // TODO:
        };

        ServerRequestParams::from(p)
    }

    /// Send back a response.
    ///
    /// If this request is part of a batch:
    ///
    /// - If all requests of the batch have been responded to, then the response is actively
    ///   sent out.
    /// - Otherwise, this response is buffered.
    ///
    pub async fn respond(self, response: Result<common::JsonValue, common::Error>) {
        let output = common::Output::from(response, common::Id::Null, common::Version::V2); // TODO: id
        let response = common::Response::Single(output);
        self.me.raw.finish(&self.request_id, Some(&response)).await;
    }

    /*/// Sends back a response similar to `respond`, then returns a `ServerSubscription` object
    /// that allows you to push more data on the corresponding connection.
    // TODO: better docs
    pub async fn into_subscription(self, response: JsonValue)
        -> Result<ServerSubscription<'a, R>, io::Error>
    {
        unimplemented!();
        Ok(ServerSubscription {
            server: self.server,
        })
    }*/
}

/*/// Active subscription of a client towards a server.
///
/// > **Note**: Holds a borrow of the `Server`. Therefore, must be dropped before the `Server` can
/// >           be dropped.
pub struct ServerSubscription<'a, R> {
    server: &'a Server<R>,
}

impl<'a, R> ServerSubscription<'a, R>
where
    for<'r> &'r R: RawServerRef<'r>
{
    pub fn id(&self) -> String {
        unimplemented!()
    }

    pub fn is_valid(&self) -> bool {
        true        // TODO:
    }

    /// Pushes a notification.
    pub async fn push(self, message: JsonValue) -> Result<(), io::Error> {
        unimplemented!()
    }
}*/
