use crate::JsonValue;
use futures::prelude::*;
use std::{io, pin::Pin};

/// Reference to a server that can produce JSON payloads for us to answer.
///
/// This trait is low-level and is implemented directly on HTTP or WebSockets servers. As such,
/// it is expected to produce raw JSON payloads and isn't concerned about concepts such as batches,
/// request/response IDs, and so on.
pub trait RawServerRef<'a> {
    /// Object that can be used to send a response.
    type RawServerRefRq: RawServerRefRq;
    /// The future that `next_payload` produces.
    type Future: Future<Output = Result<Self::RawServerRefRq, ()>> + Unpin + 'a;

    /// Returns the next payload, or an error if the server has closed.
    #[must_use]
    fn next_payload(self) -> Self::Future;
}

/// Request generated by a [`RawServerRef`]. Typically internally holds a reference to the server.
pub trait RawServerRefRq {
    /// The future that `respond` produces.
    type SendBackFut: Future<Output = Result<(), io::Error>> + Unpin;

    /// Returns the payload as JSON object.
    fn json(&self) -> &JsonValue;

    /// Send back a response.
    fn respond(self, response: &JsonValue) -> Self::SendBackFut;
}

/// Extension trait for [`RawServerRef`] that allows pushing pub-sub messages.
pub trait RawServerPubSubRef<'a>: RawServerRef<'a> {
    /// Pushes a message to the client because of an earlier subscription.
    fn push_message(&self, msg: &JsonValue);
}
